import { JsonRpcProvider } from 'ethers';
export interface Transaction {
    blockHash: string | null;
    blockNumber: number | null;
    from: string;
    gas?: string;
    gasPrice?: string;
    gasUsed?: string;
    cumulativeGasUsed?: string;
    effectiveGasPrice?: string;
    hash: string;
    transactionHash?: string;
    input?: string;
    nonce: number;
    to: string | null;
    transactionIndex?: string;
    value?: bigint;
    v?: string;
    r?: string;
    s?: string;
    type?: string;
    status?: string;
    logs?: {
        address: string;
        blockHash: string;
        blockNumber: string;
        data: string;
        logIndex: string;
        removed: boolean;
        topics: string[];
        transactionHash: string;
        transactionIndex: string;
    }[];
}
export interface TransactionRequest {
    from: string;
    to: string;
    gas?: string;
    gasPrice?: string;
    value: string;
    data: string;
}
export type BlockTag = number | string | "earliest" | "latest";
export default class TronProvider extends JsonRpcProvider {
    constructor(url: string);
    private formatAddress;
    private parseAddress;
    private parseHexNumber;
    private formatNumber;
    private formatHash;
    private request;
    private handleBlockTag;
    private formatTransaction;
    getAccounts(): Promise<string[]>;
    getBlockNumber(): Promise<number>;
    call(tx: TransactionRequest): Promise<string>;
    getChainId(): Promise<string>;
    getCoinbase(): Promise<string>;
    estimateGas(tx: TransactionRequest): Promise<bigint>;
    getGasPrice(): Promise<bigint>;
    getBalance(address: string): Promise<bigint>;
    getBlock(blockNumber: BlockTag): Promise<import("ethers").Block | null>;
    getBlockTransactionCount(blockTag: BlockTag): Promise<number>;
    getCode(address: string): Promise<string>;
    getStorage(address: string, position: string): Promise<string>;
    getTransactionByBlock(blockTag: BlockTag, index: number): Promise<{
        v: string | number | undefined;
        from: string;
        to: string | null;
        blockNumber: number;
        blockHash: string | null;
        transactionHash: string | undefined;
        value: any;
        gas: any;
        gasPrice: any;
        gasUsed: any;
        cumulativeGasUsed: any;
        effectiveGasPrice: any;
        transactionIndex: any;
        status: any;
        type: any;
        hash: string;
        input?: string | undefined;
        nonce: number;
        r?: string | undefined;
        s?: string | undefined;
        logs?: {
            address: string;
            blockHash: string;
            blockNumber: string;
            data: string;
            logIndex: string;
            removed: boolean;
            topics: string[];
            transactionHash: string;
            transactionIndex: string;
        }[] | undefined;
    }>;
    getTransaction(hash: string): Promise<{
        v: string | number | undefined;
        from: string;
        to: string | null;
        blockNumber: number;
        blockHash: string | null;
        transactionHash: string | undefined;
        value: any;
        gas: any;
        gasPrice: any;
        gasUsed: any;
        cumulativeGasUsed: any;
        effectiveGasPrice: any;
        transactionIndex: any;
        status: any;
        type: any;
        hash: string;
        input?: string | undefined;
        nonce: number;
        r?: string | undefined;
        s?: string | undefined;
        logs?: {
            address: string;
            blockHash: string;
            blockNumber: string;
            data: string;
            logIndex: string;
            removed: boolean;
            topics: string[];
            transactionHash: string;
            transactionIndex: string;
        }[] | undefined;
    } | null>;
    getTransactionReceipt(hash: string): Promise<{
        v: string | number | undefined;
        from: string;
        to: string | null;
        blockNumber: number;
        blockHash: string | null;
        transactionHash: string | undefined;
        value: any;
        gas: any;
        gasPrice: any;
        gasUsed: any;
        cumulativeGasUsed: any;
        effectiveGasPrice: any;
        transactionIndex: any;
        status: any;
        type: any;
        hash: string;
        input?: string | undefined;
        nonce: number;
        r?: string | undefined;
        s?: string | undefined;
        logs?: {
            address: string;
            blockHash: string;
            blockNumber: string;
            data: string;
            logIndex: string;
            removed: boolean;
            topics: string[];
            transactionHash: string;
            transactionIndex: string;
        }[] | undefined;
    } | null>;
    getBlockHash(): Promise<string>;
    getSyncing(): Promise<number[]>;
}
//# sourceMappingURL=tron-jsonrpc-provider.d.ts.map